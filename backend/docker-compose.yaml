services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USERNAME}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_PATH}
      - REDIS_URL=redis://${REDIS_HOST}:${REDIS_PORT}/0
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "${APP_PORT}:${APP_PORT}"
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://localhost:${APP_PORT}"]
#      interval: 1s
#      timeout: 5s
#      retries: 3
    restart: unless-stopped
    profiles:
      - dev
      - prod

  test:
    build:
      context: .
      dockerfile: Dockerfile.test
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_TEST_USERNAME}:${POSTGRES_TEST_PASSWORD}@postgres-test:${POSTGRES_TEST_PORT}/${POSTGRES_TEST_PATH}
    depends_on:
      redis:
        condition: service_healthy
      postgres-test:
        condition: service_healthy
    healthcheck:
      disable: true
      test: ["CMD", "true"]
    restart: "no"
    profiles:
      - test

  redis:
    image: redis:latest
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    profiles:
      - dev
      - test
      - prod

  postgres:
    image: postgres:latest
    environment:
      - PGUSER=${POSTGRES_USERNAME}
      - POSTGRES_DB=${POSTGRES_PATH}
      - POSTGRES_USER=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -h postgres -p ${POSTGRES_PORT} -U ${POSTGRES_USERNAME}",
        ]
      interval: 1s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    profiles:
      - dev
      - prod

  postgres-test:
    image: postgres:latest
    environment:
      - PGUSER=${POSTGRES_TEST_USERNAME}
      - POSTGRES_DB=${POSTGRES_TEST_PATH}
      - POSTGRES_USER=${POSTGRES_TEST_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_TEST_PASSWORD}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -h postgres-test -p ${POSTGRES_TEST_PORT} -U ${POSTGRES_TEST_USERNAME}",
        ]
      interval: 1s
      timeout: 5s
      retries: 3
    profiles:
      - test

  prometheus:
    image: prom/prometheus
    volumes:
      - "./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml"
      - "./prometheus/alert.rules.yml:/etc/prometheus/alert.rules.yml"
    command:
      - --config.file=/etc/prometheus/prometheus.yml
#    ports:
#      - ${PROMETHEUS_PORT:-9090}:${PROMETHEUS_PORT:-9090}
    restart: unless-stopped
    profiles:
      - prod

  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    command:
      - "--path.rootfs=/host"
    volumes:
      - "node_exporter_data:/host:ro,rslave"
#    ports:
#      - ${NODE_EXPORTER_PORT:-9100}:${NODE_EXPORTER_PORT:-9100}
    restart: unless-stopped
    profiles:
      - prod

  grafana:
    image: grafana/grafana:latest
    ports:
      - ${GRAFANA_PORT:-3000}:${GRAFANA_PORT:-3000}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    restart: unless-stopped
    profiles:
      - prod

  alertmanager:
    build:
      context: ./alertmanager
      dockerfile: DockerfileAlert
    ports:
      - ${ALERTMANAGER_PORT:-9093}:${ALERTMANAGER_PORT:-9093}
    environment:
      - TELEGRAM_ALERT_BOT_TOKEN=${TELEGRAM_ALERT_BOT_TOKEN}
      - TELEGRAM_ID=${TELEGRAM_ALERT_ID}
    depends_on:
      prometheus:
        condition: service_started
      app:
        condition: service_started
    restart: unless-stopped
    profiles:
      - prod

volumes:
  redis_data:
  postgres_data:
  node_exporter_data:
  grafana_data:
